000000 opcode
01001  RR1
01010  RR2
01000  WR
00000
100000 funct


/* 16 bits -> 32 bits
funcao que recebe uma cadeia de 16bits (immediate)
 e retorna esse numero com 32 bits (completa com zeros
esquerda)
*/
int SignalExtend (int imm)


/* ALU
Receives 2 32-bit ints and operates with them, according to the aluOp control signal (2-bit input, 4 possibilities)
The output can be a 32-bit int or a 1-bit output (called zero, used to define the branches, beq and bne)
*/
int alu (int op1, int op2, int aluOp)

/*

ALU mathematical operations

*/shift
Shift receives a 32-bit string and shifts n positions to left or right
31 < n < -31
*/
int shift(int word)


/* Registers - pagina 295
receives 3 5-bit inputs:
readRegister1 (5 bits)
readRegister2 (5 bits)
writeRegister (5 bits)
writeData (32-bit)
regWrite (1 bit control)

output
readData1 (32 bits)
readData2 (32 bits)

addi 
opc + rs + rt + imm
6   +  5 +  5 + 16


Codigo
lw $t0,4($t1)   // load at t0 t1+4 = [4+4] = [8] = 10  // t0 = 10
addi $t1,$zero,8  // t1 <= 0+8 = 8
add $t2,$t0,$t1   // t2 <= t0 + t1 = 10 + 8 = 18
beq $t2,$t3,loop  // compares t2 and t3 - They must be equal 18 = 18
addi $t3,$zero,0  //  we skip this line (which would set t3 = 0)
loop:
sw $t3,4($t1)     //  we store the value of t3 (18) in memory at t1+4 = 8+4 = 12th memory position (4 line)

valores iniciais registradores
$t0 00000 = 0
$t1 00100 = 4
$t2 00000 = 0
$t3 10010 = 18

valores iniciais memoria
[00] 00000
[04] 00000
[08] 01010 = 10
[12] 00000 
[16] 00000
[20] 00000

primeira instrucao ( lw $t0,4($t1) ) - registradores
$t0 01010 = 10
$t1 00100 = 4
$t2 00000 = 0
$t3 10010 = 18

segunda instrucao ( addi $t1,$zero,8 ) - registradores
$t0 01010 = 10
$t1 01000 = 8
$t2 00000 = 0
$t3 10010 = 18

terceira instrucao ( add $t2,$t0,$t1 ) - registradores
$t0 01010 = 10
$t1 01000 = 8
$t2 10010 = 18
$t3 10010 = 18

quarta instrucao ( beq $t2,$t3,loop )
Comparamos t2 e t3 e como eles sao iguais, tomamos o branch e pulamos a linha seguinte

quinta instrucao ( sw $t3,4($t1) )
Guardamos o valor de t3 (18) em t1+4 (base + offset) = (8+4) = 12
Assim a memoria ma posicao 12 deverÃ¡ conter 18 ao final do programa.

final memory values
[00] 00000
[04] 00000
[08] 01010 = 10
[12] 10010 = 18
[16] 00000
[20] 00000

### lw
regWrite = '1';
regDst = '0';
AluSrc = '1';
AluOp = '0';
memRead = '1';
memWrite = '0';
memToReg = '1';
branch = '0';

### add
regWrite = '1';
regDst = '1';
AluSrc = '0';
AluOp = '0';
memRead = '0';
memWrite = '0';
memToReg = '0';
branch = '0';

### addi
regWrite = '1';
regDst = '0';
AluSrc = '0';
AluOp = '1';
memRead = '0';
memWrite = '0';
memToReg = '0';
branch = '0';

### beq
regWrite = '0';
regDst = '0';
AluSrc = '0';
AluOp = '1';
memRead = '1';
memWrite = '0';
memToReg = '0';
branch = '1';

### sw
regWrite = '0';
regDst = '0';
AluSrc = '1';
AluOp = '0';
memRead = '0';
memWrite = '1';
memToReg = '0';
branch = '0';